from flask import Flask,render_template,request

from flask_sqlalchemy import SQLAlchemy

from eeconvert import eeImageToFoliumLayer as ee_plot


# importo la libreria ee de eart engine
import ee
service_account = 'saleons@unincca.edu.co'
# registro de usuario de google eart
credentials = ee.ServiceAccountCredentials(service_account, 'tesis-env\llave\leafy-rope-354103-63997f0b87b4.json')
# uno el .json que descargue de google cloud
ee.Initialize(credentials)
# se envian datos para entra
import folium

# Import the Folium library.
import folium

#aqui uno crea una funcion para mostra las capas de google en el mpa de folium
def add_ee_layer(self, ee_image_object, vis_params, name):
# a la variablde se le esta pasando la iamge y los parametretro para verla
  map_id_dict = ee.Image(ee_image_object).getMapId(vis_params)

# se agrega a folium un rater  con ka siguiente info
  folium.raster_layers.TileLayer(
    tiles = map_id_dict['tile_fetcher'].url_format,
    # informacion de autor
    attr = 'Map Data &copy; <a href="https://earthengine.google.com/">Google Earth Engine</a>',
    name = name,
    # sobre pone el nuevo mapa
    overlay = True,
    # el llayer se muestra para activar y desactivar
    control = True
  ).add_to(self)

# se creaa un nuevo objeto mapa , con la info de la funcion mapa esto es para cargar le mapa
folium.Map.add_ee_layer = add_ee_layer

# ubicacion
lon,lat=76.10,11.05


# SE CREA UN PUNTO 
punto=ee.Geometry.Point(lon,lat)

# PARAMETROS DE VISUALIZACION
_vis_params = {
  'min': 0,
  'max': 0.5,
  'bands': ['B4', 'B3', 'B2']}

#IAMGEN RASTER
imagenL08=(ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')
             .filterBounds(punto)
             .filterDate('2020-01-01','2020-12-31')
             .filterMetadata('CLOUD_COVER','less_than',20)
            .median())
 


# Create a mapa
my_map = folium.Map(location=[lat, lon], zoom_start=3)

# agregar raster al mapa
my_map.add_ee_layer(imagenL08, _vis_params, 'DEM')

# agrgar p√°nel de control
my_map.add_child(folium.LayerControl())

# Display the map.
#display(my_map)

# aqui le paso las coordenadas al mapa principal
#mapaobjeto = folium.Map(location=[6.1236, -75.6750])
# actualice el mapa
iframe = my_map._repr_html_()

# se le asigna el codigo html
#mapaobjeto.get_root().html.add_child(folium.Element("""

#<head>
#	<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min-.js"></script>
#</head>
#"""))


# guardo mapa
#mapaobjeto.save("templates/index.html")


#img = ee.Image('LANDSAT/LT05/C01/T1_SR/LT05_034033_20000913')
# ene le objeto iamgen se guarda la iamgen landsat

#print(img)

# Print image object WITH call to getInfo(); prints image metadata.
#print(img.getInfo())


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root@localhost/muestra'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)


class nivel_confianza(db.Model):
    id=db.Column(db.Integer,primary_key=True)
    Nivel=db.Column(db.Numeric(100))
    Z=db.Column(db.Numeric(100))


@app.route('/')
def index():
     d=[]
     tasks=nivel_confianza.query.all()
     for tar in tasks:
             d.append(tar.Z)
            
     return render_template("index.html",d=d)   

@app.route('/RESULTADO',methods=['POST'] )
def a():
     if request.method =="POST": 
         N=float(request.form["N"])
         Z=float(request.form["Z"])
         Z=Z**2
         e=int(request.form["e"])
         e=e/100
         p=int(request.form["p"])
         p=p/100
         q=int(request.form["q"])
         q=q/100
         print(N)
         print(Z)
         print(e)
         print(p)
         print(q)
        
         resultado=(p*q*Z)/e**2
         print(resultado)
         d=[]
         tasks=nivel_confianza.query.all()
         for tar in tasks:
             d.append(tar.Z)
         return render_template("index.html",resultado=resultado,d=d)
        # al instancia redirect logro devolver al index


if __name__ == "__main__":
    app.run(debug=True, port=5000)


