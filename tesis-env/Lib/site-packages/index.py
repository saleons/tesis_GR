from flask import Flask,render_template,request
from flask_sqlalchemy import SQLAlchemy
from eeconvert import eeImageToFoliumLayer as ee_plot
import ee
import folium  # importo la libreria ee de eart engine
from mapa import hacer_mapa # importo una funcion de mapas

service_account = 'saleons@unincca.edu.co'# registro de usuario de google eart

credentials = ee.ServiceAccountCredentials(service_account, 'tesis-env\llave\leafy-rope-354103-63997f0b87b4.json')# uno el .json que descargue de google cloud

ee.Initialize(credentials)# se envian datos para entra

# genero mapas con la funcion hacer mapas
coordenada_centrar=[-11.010444,-76.111489]
hacer_mapa(coordenada_centrar)

# accedo a base de datos
app = Flask(__name__,template_folder='templates')
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root@localhost/muestra'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# entro a la  tabla
class nivel_confianza(db.Model):
    id=db.Column(db.Integer,primary_key=True)
    Nivel=db.Column(db.Numeric(100))
    Z=db.Column(db.Numeric(100))

# ruta
@app.route('/')
def index():
     d=[]
     tasks=nivel_confianza.query.all()
     for tar in tasks:
             d.append(tar.Z)
            
     return render_template("index.html",d=d)   
 
 
# redireciono con el boton a la pgina html con la funion pagina 2 
@app.route('/pagina2')
def pagina2():
    return render_template('pagina2.html')

# redireciono con el boton a la pgina html con la funion registrarse
@app.route('/registrarse')
def registrarse():
    return render_template('registrarse.html')
 


 
 
 
 

@app.route('/RESULTADO',methods=['POST'] )
def a():
     if request.method =="POST": 
         N=float(request.form["N"])
         Z=float(request.form["Z"])
         Z=Z**2
         e=int(request.form["e"])
         e=e/100
         p=int(request.form["p"])
         p=p/100
         q=int(request.form["q"])
         q=q/100
         print(N)
         print(Z)
         print(e)
         print(p)
         print(q)
        
         resultado=(p*q*Z)/e**2
         print(resultado)
         d=[]
         tasks=nivel_confianza.query.all()
         for tar in tasks:
             d.append(tar.Z)
         return render_template("index.html",resultado=resultado,d=d)
        # al instancia redirect logro devolver al index


if __name__ == "__main__":
    app.run(debug=True, port=5000)


